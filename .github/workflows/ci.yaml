#name: CI
#
#on:
#  push:
#    branches: [ main, master ]
#  pull_request:
#    branches: [ main, master ]
#
#env:
#  REGISTRY: "cr.selcloud.ru/ippolid"
#  IMAGE_NAME_SERVER: "server"
#  IMAGE_NAME_MIGRATOR: "migration"
#  CONTAINER_NAME: "server-container"
#
#jobs:
#  image-build-and-push:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout master
#        uses: actions/checkout@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#
#      - name: Login to Docker Registry
#        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
#
#      - name: Build and Push Docker Image
#        run: |
#          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
#          docker buildx create --use
#          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME_SERVER:$TAG_NAME -f deploy/Dockerfile .
#          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME_MIGRATOR:$TAG_NAME -f deploy/migration.Dockerfile .
#
#  deploy-image:
#    runs-on: ubuntu-latest
#    needs: image-build-and-push
#
#    steps:
#      - name: Deploy to Selectel Cloud via SSH action
#        uses: appleboy/ssh-action@v1.0.0
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SSH_USERNAME }}
#          key: ${{ secrets.SSHKEY }}
#          envs: IMAGE_NAME_SERVER,IMAGE_NAME_MIGRATOR,REGISTRY,GITHUB_SHA,CONTAINER_NAME
#          script: |
#            # Set up variables
#            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
#
#            # Login into Selectel Registry
#            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
#
#            # Stop running container
#            docker stop $CONTAINER_NAME
#
#            # Remove old container
#            docker rm $CONTAINER_NAME
#
#            # Run a new container from a new image
#            docker run -d -p 50051:50051 --name $CONTAINER_NAME -t $REGISTRY/$IMAGE_NAME:$TAG_NAME
name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/ippolid"
  IMAGE_NAME_SERVER: "server"
  IMAGE_NAME_MIGRATOR: "migration"
  CONTAINER_NAME: "server-container"
  PG_CONTAINER_NAME: "pg-local"
  PG_VOLUME_NAME: "postgres_volume_local"
  PG_DB: "auth"
  PG_USER: "auth-user"
  PG_PASSWORD: "auth-password"
  PG_PORT: "54321"

jobs:
  image-build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker Images
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          
          docker buildx build --no-cache --push \
            --tag $REGISTRY/$IMAGE_NAME_SERVER:$TAG_NAME \
            -f deploy/Dockerfile .

          docker buildx build --no-cache --push \
            --tag $REGISTRY/$IMAGE_NAME_MIGRATOR:$TAG_NAME \
            -f deploy/migration.Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSHKEY }}
          envs: IMAGE_NAME_SERVER,IMAGE_NAME_MIGRATOR,REGISTRY,GITHUB_SHA,CONTAINER_NAME,PG_CONTAINER_NAME,PG_VOLUME_NAME,PG_USER,PG_PASSWORD,PG_DB,PG_PORT
          script: |
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)

            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

            docker volume create $PG_VOLUME_NAME || true
            docker network create pg-network || true

            if [ -z "$(docker ps -q -f name=$PG_CONTAINER_NAME)" ]; then
              docker run -d \
                --name $PG_CONTAINER_NAME \
                --network pg-network \
                -e POSTGRES_DB=$PG_DB \
                -e POSTGRES_USER=$PG_USER \
                -e POSTGRES_PASSWORD=$PG_PASSWORD \
                -v $PG_VOLUME_NAME:/var/lib/postgresql/data \
                -p $PG_PORT:5432 \
                postgres:14-alpine3.17
            fi

            # Run migrations
            docker run --rm \
              --network pg-network \
              -e DB_HOST=$PG_CONTAINER_NAME \
              $REGISTRY/$IMAGE_NAME_MIGRATOR:$TAG_NAME

            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true

            docker run -d \
              --network pg-network \
              -p 50051:50051 \
              --name $CONTAINER_NAME \
              -e PG_HOST=$PG_CONTAINER_NAME \
              -e PG_PORT=5432 \
              -e PG_USER=$PG_USER \
              -e PG_PASSWORD=$PG_PASSWORD \
              -e PG_DATABASE_NAME=$PG_DB \
              -e DB_HOST=$PG_CONTAINER_NAME \
              $REGISTRY/$IMAGE_NAME_SERVER:$TAG_NAME
